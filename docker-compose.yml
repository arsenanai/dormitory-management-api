version: '3.8'

services:
  # Database
  db:
    image: mysql:8.0
    container_name: crm-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-dormitory_management}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-password}
      MYSQL_USER: ${DB_USERNAME:-root}
      MYSQL_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init:/docker-entrypoint-initdb.d:ro
    command: --default-authentication-plugin=mysql_native_password
    networks:
      - crm-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis
  redis:
    image: redis:alpine
    container_name: crm-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - crm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 20s
      retries: 10

  # Backend API (Development)
  api-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: crm-api-dev
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - .:/var/www/html
      - /var/www/html/vendor
      - /var/www/html/node_modules
    environment:
      APP_ENV: local
      APP_DEBUG: true
      DB_CONNECTION: mysql
      DB_HOST: db
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE:-dormitory_management}
      DB_USERNAME: ${DB_USERNAME:-root}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CACHE_STORE: file
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crm-network
    profiles:
      - dev

  # Backend API (Production)
  api-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: crm-api-prod
    restart: unless-stopped
    ports:
      - "8000:80"
    environment:
      APP_ENV: production
      APP_DEBUG: false
      DB_CONNECTION: mysql
      DB_HOST: db
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE:-dormitory_management}
      DB_USERNAME: ${DB_USERNAME:-root}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CACHE_STORE: file
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - crm-network
    profiles:
      - production

  # MailHog for development
  mailhog:
    image: mailhog/mailhog:latest
    container_name: crm-mailhog
    ports:
      - "1026:1025"
      - "8025:8025"
    networks:
      - crm-network
    profiles:
      - dev

  # Database migrations
  migrate:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: crm-migrate
    command: php artisan migrate --force
    environment:
      DB_CONNECTION: mysql
      DB_HOST: db
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE:-dormitory_management}
      DB_USERNAME: ${DB_USERNAME:-root}
      DB_PASSWORD: ${DB_PASSWORD:-password}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - crm-network
    profiles:
      - dev
      - production

  # Database seeding
  seed:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: crm-seed
    command: php artisan db:seed --force
    environment:
      DB_CONNECTION: mysql
      DB_HOST: db
      DB_PORT: 3306
      DB_DATABASE: ${DB_DATABASE:-dormitory_management}
      DB_USERNAME: ${DB_USERNAME:-root}
      DB_PASSWORD: ${DB_PASSWORD:-password}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - crm-network
    profiles:
      - dev

  # Testing
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: crm-test
    command: php artisan test
    environment:
      APP_ENV: testing
      DB_CONNECTION: sqlite
      DB_DATABASE: ":memory:"
    networks:
      - crm-network
    profiles:
      - test

volumes:
  mysql_data:
  redis_data:

networks:
  crm-network:
    driver: bridge